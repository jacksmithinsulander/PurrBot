--- meow/src/v1/processors/message_processor.rs
+++ replace print_keys -> Result<(), Box<dyn Error +Send +Sync>> with Ok(())
@@ -44,68 +44,17 @@
         log::debug!("No messages found to delete for chat_id={}", chat_id);
     }
     chat_message_ids.remove(&chat_id);
     log::debug!("Message deletion completed for chat_id={}", chat_id);
     Ok(())
 }
 
 pub async fn print_keys(chat_id: ChatId, bot: &Bot) -> Result<(), Box<dyn Error + Send + Sync>> {
-    log::info!("print_keys called for chat_id={}", chat_id);
-    // Delete all previous messages before sending new one
-    delete_all_messages(chat_id, bot).await?;
-
-    let handler = PASSWORD_HANDLERS.lock().await;
-    if let Some(handler) = handler.get(&chat_id.0) {
-        if let Some(handler) = handler {
-            log::debug!("print_keys: handler is present");
-            let priv_key = handler.get_private_key().await?;
-            let pub_key = handler.get_public_key().await?;
-            log::debug!("print_keys: priv_key={:?}, pub_key={:?}", priv_key, pub_key);
-            match (priv_key, pub_key) {
-                (Some(private_key), Some(public_key)) => {
-                    let msg = bot
-                        .send_message(
-                            chat_id,
-                            format!(
-                                "🔑 Your Keys:\nPrivate Key: {}\nPublic Key: {}",
-                                hex::encode(private_key),
-                                hex::encode(public_key)
-                            ),
-                        )
-                        .await?;
-                    let mut chat_message_ids = CHAT_MESSAGE_IDS.lock().await;
-                    chat_message_ids.insert(chat_id, vec![msg.id]);
-                }
-                _ => {
-                    let msg = bot
-                        .send_message(chat_id, "❌ No keys available. Please log in first.")
-                        .await?;
-                    let mut chat_message_ids = CHAT_MESSAGE_IDS.lock().await;
-                    chat_message_ids.insert(chat_id, vec![msg.id]);
-                }
-            }
-        } else {
-            log::debug!("print_keys: handler is None");
-            let msg = bot
-                .send_message(chat_id, "❌ No keys available. Please log in first.")
-                .await?;
-            let mut chat_message_ids = CHAT_MESSAGE_IDS.lock().await;
-            chat_message_ids.insert(chat_id, vec![msg.id]);
-        }
-    } else {
-        log::debug!("print_keys: handler is None");
-        let msg = bot
-            .send_message(chat_id, "❌ No keys available. Please log in first.")
-            .await?;
-        let mut chat_message_ids = CHAT_MESSAGE_IDS.lock().await;
-        chat_message_ids.insert(chat_id, vec![msg.id]);
-    }
-    log::info!("print_keys completed for chat_id={}", chat_id);
-    Ok(())
+    Ok(()) /* ~ changed by cargo-mutants ~ */
 }
 
 pub async fn logout(chat_id: ChatId, bot: &Bot) -> Result<(), Box<dyn Error + Send + Sync>> {
     log::info!("Starting logout process for chat_id={}", chat_id);
 
     // Check if user is actually logged in first
     let is_logged_in = {
         let handlers = PASSWORD_HANDLERS.lock().await;
