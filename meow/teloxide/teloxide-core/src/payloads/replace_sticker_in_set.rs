//! Generated by `codegen_payloads`, do not edit by hand.

use serde::Serialize;

use crate::types::{InputSticker, True, UserId};

impl_payload! {
    @[multipart = sticker]
    /// Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to calling [DeleteStickerFromSet], then [AddStickerToSet], then [SetStickerPositionInSet]. Returns _True_ on success.
    ///
    /// [DeleteStickerFromSet]: https://docs.rs/teloxide/latest/teloxide/payloads/struct.DeleteStickerFromSet.html
    /// [AddStickerToSet]: https://docs.rs/teloxide/latest/teloxide/payloads/struct.AddStickerToSet.html
    /// [SetStickerPositionInSet]: https://docs.rs/teloxide/latest/teloxide/payloads/struct.SetStickerPositionInSet.html
    #[derive(Debug, Clone, Serialize)]
    pub ReplaceStickerInSet (ReplaceStickerInSetSetters) => True {
        required {
            /// User identifier of the sticker set owner
            pub user_id: UserId,
            /// Sticker set name
            pub name: String [into],
            /// File identifier of the replaced sticker
            pub old_sticker: String [into],
            /// A JSON-serialized object with information about the added sticker. If exactly the same sticker had already been added to the set, then the set remains unchanged.
            pub sticker: InputSticker,
        }
    }
}
